import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { firestore } from "../firebase";
import IGroup from "../interfaces/Group";

//*Thunk
export const PostGroupThunk = ({ name, color, id }: { name: string; color: string; id: string }) => async (
  dispatch: (action: { payload: { name: string; color: string; id: string }; type: string }) => void
) => {
  try {
    // this ref contains the id generated by firebase
    const newGroupRef = await firestore.collection("groups").add({ name, color });
  } catch (error) {
    console.log(error);
  }
};

//*thunk
export const FetchGroupsFromFirebase = () => async (dispatch: any) => {
  let fetchedGroups: IGroup[] = [];
  dispatch(loadingGroup.actions.switchLoading({ newState: true }));
  try {
    const groups = await firestore.collection("groups").get();
    groups.forEach((group) => {
      fetchedGroups.push({
        name: group.get("name"),
        color: group.get("color"),
      });
    });

    dispatch(GroupSlice.actions.FetchGroups({ groups: fetchedGroups }));
    dispatch(loadingGroup.actions.switchLoading({ newState: false }));
  } catch (error) {
    throw "Groups Error";
  }
};

const initialState: IGroup[] = [];

const GroupSlice = createSlice({
  name: "groups",
  initialState,
  reducers: {
    FetchGroups: (state, { payload }: PayloadAction<{ groups: IGroup[] }>) => {
      return payload.groups;
    },
  },
});

const loadingGroup = createSlice({
  name: "loadingGroup",
  initialState: true,
  reducers: {
    switchLoading: (state, { payload }: PayloadAction<{ newState: boolean }>) => {
      return payload.newState;
    },
  },
});

export const { FetchGroups } = GroupSlice.actions;
export const groupReducers = { Groups: GroupSlice.reducer, LoadingGroup: loadingGroup.reducer };
